###############################################################################
#                        Telegraf Configuration                               #
###############################################################################

## Global tags can be specified here in key="value" format. ##
[global_tags]
    location = "coderbunker"
    room = "bunker"

## Configuration for telegraf agent ##
[agent]
    # Default data collection interval for all inputs
    interval = "5s"
    # Rounds collection interval to 'interval'. ie, if interval="10s" then always collect on :00, :10, :20, etc.
    round_interval = true
    # Telegraf will send metrics to outputs in batches of at most metric_batch_size metrics.
    metric_batch_size = 1000
    # For failed writes, telegraf will cache metric_buffer_limit metrics for each output, and will flush this buffer on a successful write. 
    metric_buffer_limit = 10000000
    # Collection jitter is used to jitter the collection by a random amount.
    collection_jitter = "0s"
    # Default flushing interval for all outputs. Maximum flush_interval will be flush_interval + flush_jitter
    flush_interval = "10s"
    # Jitter the flush interval by a random amount. This is primarily to avoid large write spikes for users running a large number of telegraf instances.
    flush_jitter = "0s"
    # By default or when set to "0s", precision will be set to the same timestamp order as the collection interval, with the maximum being 1s.
    precision = ""
    # Logging configuration:
    debug = false
    quiet = false
    logfile = ""
    # Override default hostname, if empty use os.Hostname()
    hostname = "SuperNanny2"
    # If set to true, do no set the "host" tag in the telegraf agent.
    omit_hostname = false

###############################################################################
#                            OUTPUT PLUGINS                                   #
###############################################################################

# Configuration for sending metrics to InfluxDB (default)
[[outputs.influxdb]]
    # The full HTTP or UDP URL for your InfluxDB instance.
    urls = ["https://influxdb01.monitor.agora-space.com:8066"]
    # The target database for metrics; will be created as needed.
    database = "telegraf"
    # If true, no CREATE DATABASE queries will be sent.
    skip_database_creation = true
    # Name of existing retention policy to write to.
    retention_policy = ""
    # Write consistency (clusters only), can be: "any", "one", "quorum", "all".
    write_consistency = "any"
    # Timeout for HTTP messages.
    timeout = "15s"
    # HTTP Basic Auth
    username = "telegraf"
    password = "cookiesPancakes@work"
    # HTTP User-Agent
    user_agent = "telegraf"
    # HTTP Content-Encoding for write request body, can be set to "gzip" to compress body or "identity" to apply no encoding.
    content_encoding = "identity"
    # Routing for untagged inputs (All data will be sent to this database if the 'influxdb-database' tag is not set)
    [outputs.influxdb.tagdrop]
        influxdb_database = ["*"]

# Configuration for sending metrics to InfluxDB (energy-monitor)
[[outputs.influxdb]]
    urls = ["https://influxdb01.monitor.agora-space.com:8066"]
    database = "energy-monitor"
    skip_database_creation = true
    retention_policy = ""
    write_consistency = "any"
    timeout = "15s"
    username = "energy-monitor"
    password = "ChoendSelberOebbisWehle"
    user_agent = "telegraf-energy"
    content_encoding = "identity"
    tagexclude = ["influxdb_database"]
    [outputs.influxdb.tagpass]
        influxdb_database = ["energy-monitor"]

# Configuration for sending metrics to InfluxDB (air-quality)
[[outputs.influxdb]]
    urls = ["https://influxdb01.monitor.agora-space.com:8066"]
    database = "air-quality"
    skip_database_creation = true
    retention_policy = ""
    write_consistency = "any"
    timeout = "15s"
    username = "air-quality"
    password = "123mewmewWoo?"
    user_agent = "telegraf-air-quality"
    content_encoding = "identity"
    tagexclude = ["influxdb_database"]
    [outputs.influxdb.tagpass]
        influxdb_database = ["air-quality"]

###############################################################################
#                            INPUT PLUGINS                                    #
###############################################################################

## Local metrics about cpu usage, disk usage, disk IO, kernel, memory, processes, swap, system load & uptime for pi-device ##
[[inputs.cpu]]
    # Whether to report per-cpu stats or not
    percpu = true
    # Whether to report total system cpu stats or not
    totalcpu = true
    # If true, collect raw CPU time metrics.
    collect_cpu_time = false
    # If true, compute and report the sum of all non-idle CPU states.
    report_active = false
[[inputs.disk]]
    # Ignore mount points by filesystem type.
    ignore_fs = ["tmpfs", "devtmpfs", "devfs", "overlay", "aufs", "squashfs"]
[[inputs.diskio]]
[[inputs.kernel]]
[[inputs.mem]]
[[inputs.processes]]
[[inputs.swap]]
[[inputs.system]]

## Socket listeners ##
# Socket listener for default.
[[inputs.socket_listener]]
    # URL to listen on
    service_address = "udp://:6969"
    # Maximum number of concurrent connections. 0 (default) is unlimited.
    max_connections = 128
    # Read timeout. 0 (default) is unlimited.
    read_timeout = "30s"
    # Maximum socket buffer size in bytes.
    read_buffer_size = 65535
    # Period between keep alive probes.
    keep_alive_period = "5m"
    # Data format to consume.
    data_format = "influx"
    # Redirect to energy-monitor database
    [inputs.socket_listener.tags]
        influxdb_database = "energy-monitor"

# Socket listener for air-quality.
[[inputs.socket_listener]]
    service_address = "udp://:6970"
    max_connections = 128
    read_timeout = "30s"
    read_buffer_size = 65535
    keep_alive_period = "5m"
    data_format = "influx"
    #Redirect to air-quality database
    [inputs.socket_listener.tags]
        influxdb_database = "air-quality"

## HTTP queries ##
[[inputs.http_response]]
    interval = "5s"
    address = "https://www.google.com/search"
    response_timeout = "10s"
    method = "GET"
    follow_redirects = true

[[inputs.http_response]]
    interval = "5s"
    address = "https://docs.google.com/"
    response_timeout = "10s"
    method = "GET"
    follow_redirects = true

[[inputs.http_response]]
    interval = "5s"
    address = "https://facebook.com/"
    response_timeout = "10s"
    method = "GET"
    follow_redirects = true
    
## Ping queries ##
[[inputs.ping]]
    interval = "10s"
    urls = ["8.8.8.8"]
    count = 5
    ping_interval = 1.0
    timeout = 10.0
    [inputs.ping.tags]
        name = "google_dns_icmp"

[[inputs.ping]]
    interval = "10s"
    urls = ["gitlab.com"]
    count = 5
    ping_interval = 1.0
    timeout = 10.0
    [inputs.ping.tags]
        name = "gitlab_icmp"

[[inputs.ping]]
    interval = "10s"
    urls = ["github.com"]
    count = 5
    ping_interval = 1.0
    timeout = 10.0
    [inputs.ping.tags]
        name = "github_icmp"

[[inputs.ping]]
    interval = "10s"
    urls = ["www.pypi.org"]
    count = 5
    ping_interval = 1.0
    timeout = 10.0
    [inputs.ping.tags]
        name = "pypi_icmp"

[[inputs.ping]]
    interval = "10s"
    urls = ["www.slack.com"]
    count = 5
    ping_interval = 1.0
    timeout = 10.0
    [inputs.ping.tags]
        name = "slack_icmp"

[[inputs.ping]]
    interval = "10s"
    urls = ["10.1.0.1"]
    count = 5
    ping_interval = 1.0
    timeout = 10.0
    [inputs.ping.tags]
        name = "router_icmp"

[[inputs.ping]]
    interval = "10s"
    urls = ["10.1.0.2"]
    count = 5
    ping_interval = 1.0
    timeout = 10.0
    [inputs.ping.tags]
        name = "gateway_icmp"

[[inputs.ping]]
    interval = "10s"
    urls = ["10.1.0.64"]
    count = 5
    ping_interval = 1.0
    timeout = 10.0
    [inputs.ping.tags]
        name = "hp_printer_icmp"

[[inputs.ping]]
    interval = "10s"
    urls = ["10.1.0.104"]
    count = 5
    ping_interval = 1.0
    timeout = 10.0
    [inputs.ping.tags]
        name = "brother_printer_icmp"

## DNS queries ##
[[inputs.dns_query]]
    servers = ["8.8.8.8", "114.114.114.114"]
    network = "udp"
    domains = ["www.baidu.com", "www.agora-space.com"]
    port = 53
    timeout = 2